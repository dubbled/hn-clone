{"version":3,"sources":["serviceWorker.ts","services/hn-client.ts","actions/index.ts","App.tsx","reducer/dataReducer.ts","reducer/appReducer.ts","reducer/index.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","HNClient","client","axios","create","baseURL","topStories","a","get","storyByID","id","types","FETCH_IDS_REQUEST","FETCH_IDS_SUCCESS","FETCH_IDS_ERROR","FETCH_STORIES_REQUEST","FETCH_STORIES_SUCCESS","FETCH_STORIES_ERROR","APP_PAGE_GOTO","hnClient","action","type","payload","actions","FetchIDs","dispatch","then","r","storyIDs","data","map","v","toString","FetchStories","catch","e","pageMax","page","undefined","begin","end","length","slice","Promise","all","stories","s","Navigate","mstp","state","app","ListStories","connect","props","navigate","isFirst","isLast","ListGroupItem","onClick","open","url","className","key","title","split","score","by","descendants","Pagination","First","disabled","Prev","Item","active","Next","Last","Container","children","Heading","Navbar","sticky","bg","variant","Brand","isLoading","noStories","ListGroup","Spinner","animation","currentPage","defaultDataState","defaultAppState","combineReducers","cache","pageCount","Math","floor","i","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"+MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oHCHSC,E,4DATbC,OAASC,IAAMC,OAAO,CACrBC,QALc,0C,KASfC,W,sBAAa,sBAAAC,EAAA,+EAAY,EAAKL,OAAOM,IAAZ,qBARR,wBAQJ,2C,KACbC,U,uCAAY,WAAOC,GAAP,SAAAH,EAAA,+EAAsB,EAAKL,OAAOM,IAAZ,gBAAyBE,GAAzB,OATjB,wBASL,2C,yHCPDC,EAAQ,CACnBC,kBAAkB,GAAD,OAJF,QAIE,gBACjBC,kBAAkB,GAAD,OALF,QAKE,gBACjBC,gBAAgB,GAAD,OANA,QAMA,cACfC,sBAAsB,GAAD,OAPN,QAOM,oBACrBC,sBAAsB,GAAD,OARN,QAQM,oBACrBC,oBAAoB,GAAD,OATJ,QASI,kBAEnBC,cAAc,GAAD,OAVA,MAUA,cAGTC,EAAW,IAAIlB,EAEfmB,EAAS,SAACC,EAAMC,GAAP,MAAoB,CAAED,OAAMC,YAC9BC,EAAU,CACrBC,SAAU,SAACF,GAAD,OAAa,SAACG,GAGtB,OAFAA,EAASL,EAAOT,EAAMC,kBAAmBU,IAElCH,EAASb,aACboB,MAAK,SAAAC,GACJL,EAAQM,SAAWD,EAAEE,KAAKC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,cACrCP,EAASL,EAAOT,EAAME,kBAAmBS,EAAQM,WACjDH,EAASF,EAAQU,aAAaX,OAE/BY,OAAM,SAAAC,GAAC,OAAIV,EACVL,EAAOT,EAAMG,gBAAiBqB,SAIpCF,aAAc,SAACX,GAAD,OAAa,SAACG,GAAc,IAClCW,EAA4Bd,EAA5Bc,QAASR,EAAmBN,EAAnBM,SAAUS,EAASf,EAATe,UACTC,IAAZF,IACFA,EAAU,IAGZ,IAAMG,GAASF,EAAO,GAAKD,EACvBI,EAAMD,EAAQH,EACdI,EAAMZ,EAASa,SACjBD,EAAMZ,EAASa,OAAS,GAE1B,IAAIC,EAAYd,EAASc,MAAMH,EAAOC,GAItC,OAFAf,EAASL,EAAOT,EAAMI,sBAAuB,CAAE2B,WAExCC,QAAQC,IAASF,EAAMZ,KAC5B,SAAApB,GAAE,OAAIS,EAASV,UAAUC,OACxBgB,MAAK,SAAAmB,GACJpB,EAASL,EACPT,EAAMK,sBACN,CACE6B,QAASA,EAAQf,KAAI,SAAAgB,GAAC,OAAIA,EAAEjB,QAC5BQ,OAAMD,gBAIXF,OAAM,SAAAC,GACLV,EAASL,EAAOT,EAAMM,oBAAqBkB,SAIjDY,SAAU,SAACzB,GAAD,OAAa,SAACG,GAAc,IAC9BY,EAAkBf,EAAlBe,KACyB,IADPf,EAAZuB,QACAR,EAAK,GAAGI,QAClBhB,EAASF,EAAQU,aAAaX,IAEhCG,EAASL,EAAOT,EAAMO,cAAe,CAACmB,aCjEpCW,EAAO,SAACC,GAAD,MAAY,CACvBA,MAAO,CACLpB,KAAMoB,EAAMpB,KACZqB,IAAKD,EAAMC,OAWTC,EAAcC,YAAQJ,EAARI,EAAc,SAACC,GAAW,IAAD,EACbA,EAAMJ,MAAMpB,KAAlCD,EADmC,EACnCA,SAAUiB,EADyB,EACzBA,QACVR,EAASgB,EAAMJ,MAAMC,IAArBb,KAEFiB,EAAW,SAACjB,GAChBgB,EAAM5B,SAASF,EAAQwB,SAAS,CAC9BnB,WAAUiB,UAASR,WAIjBkB,EAAU,kBAAe,IAATlB,GAChBmB,EAAS,kBAAMnB,IAASQ,EAAQJ,QACtC,OAAO,6BAEHI,EAAQR,EAAK,GAAGP,KAAI,SAAAgB,GAAC,OACnB,kBAACW,EAAA,EAAD,CACEC,QAAS,kBAAM7D,OAAO8D,KAAKb,EAAEc,MAC7BC,UAAU,WACVC,IAAKhB,EAAEpC,IACP,4BAAKoC,EAAEiB,OACP,uCA1BIzB,KADMsB,EA2BSd,EAAEc,KAzBpB,uBAEFA,EAAII,MAAM,KAAK,GAuBd,KACA,2BAAIlB,EAAEmB,MAAN,cAAwBnB,EAAEoB,GAA1B,MAAiCpB,EAAEqB,YAAnC,cA5BS,IAACP,KAgChB,kBAACH,EAAA,EAAD,CAAeI,UAAU,YACvB,kBAACO,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,MAAZ,CACEX,QAAS,kBAAMJ,EAAS,IACxBgB,SAAUf,MACZ,kBAACa,EAAA,EAAWG,KAAZ,CACEb,QAAS,kBAAMJ,EAASjB,EAAK,IAC7BiC,SAAUf,MACZ,kBAACa,EAAA,EAAWI,KAAZ,CAAiBC,QAAM,GAAEpC,GACzB,kBAAC+B,EAAA,EAAWM,KAAZ,CACEhB,QAAS,kBAAMJ,EAASjB,EAAK,IAC7BiC,SAAUd,MACZ,kBAACY,EAAA,EAAWO,KAAZ,CACEjB,QAAS,kBAAMJ,EAAST,EAAQJ,SAChC6B,SAAUd,YAMdoB,EAAY,SAACvB,GAAD,OAChB,yBAAK3C,GAAG,aAAa2C,EAAMwB,WAGvBC,EAAU1B,YAAQJ,EAARI,EAAc,SAACC,GAC7B,OACE,kBAAC0B,EAAA,EAAD,CAAQC,OAAO,MAAMC,GAAG,OAAOC,QAAQ,QACrC,kBAACH,EAAA,EAAOI,MAAR,uBA8CS/B,cAAQJ,EAARI,EAzCH,SAACC,GAAW,IAAD,EACUA,EAAMJ,MAAMpB,KAAnCuD,EADa,EACbA,UACA/C,GAFa,EACFQ,QACFQ,EAAMJ,MAAMC,IAArBb,MAEFgD,EAAiD,IAArChC,EAAMJ,MAAMpB,KAAKD,SAASa,OAM5C,OAJK2C,GAAaC,GAChBhC,EAAM5B,SAASF,EAAQC,SAAS,CAAEa,KAAM,KAGtCgD,GAAaD,EAEb,yBAAKvB,UAAU,OACb,kBAACiB,EAAD,MACA,kBAAC,EAAD,KACE,kBAACQ,EAAA,EAAD,KACE,kBAACA,EAAA,EAAUd,KAAX,CAAgBX,UAAU,YACxB,kBAAC0B,EAAA,EAAD,CACE1B,UAAU,UACV2B,UAAU,eAStB,yBAAK3B,UAAU,OACb,kBAACiB,EAAD,MACA,kBAAC,EAAD,KACE,kBAACQ,EAAA,EAAD,KACE,kBAACnC,EAAD,CACEsC,YAAapD,U,sBCpGnBqD,EAA+B,CACnCN,WAAW,EACXxD,SAAU,GACViB,QAAS,GACTT,QAAS,ICPLuD,EAA6B,CACjCtD,KAAM,GCFOuD,cAAgB,CAC7B1C,IDIa,WAAsC,IAArCD,EAAoC,uDAA5B0C,EAAiBvE,EAAW,uCAClD,OAAQA,EAAOC,MACb,KAAKV,EAAMO,cAAX,IACUmB,EAASjB,EAAOE,QAAhBe,KACR,OAAO,2BAAKY,GAAZ,IAAmBZ,SACrB,QACE,OAAOY,ICTXpB,KFSa,WAAuC,IAAtCoB,EAAqC,uDAA7ByC,EAAkBtE,EAAW,uCACrD,OAAQA,EAAOC,MACb,KAAKV,EAAMC,kBACT,OAAO,2BAAKqC,GAAZ,IAAmBmC,WAAW,IAChC,KAAKzE,EAAME,kBACT,OAAO,2BACFoC,GADL,IAEErB,SAAUR,EAAOE,UAErB,KAAKX,EAAMI,sBACT,OAAO,2BAAKkC,GAAZ,IAAmBmC,WAAW,IAChC,KAAKzE,EAAMK,sBAAX,MAC4BI,EAAOE,QAAzBe,EADV,EACUA,KAAMQ,EADhB,EACgBA,QACNjB,EAAsBqB,EAAtBrB,SAAUQ,EAAYa,EAAZb,QACZyD,EAAQ5C,EAAMJ,QAEhBiD,EAAYC,KAAKC,MAAMpE,EAASa,OAASL,GAG7C,GAFIR,EAASa,OAASL,IAAY,GAAG0D,IAEjCD,EAAMpD,OAASqD,EACf,IAAK,IAAIG,EAAI,EAAGA,EAAIH,EAAWG,IAC/BJ,EAAMI,GAAK,GAKf,OAFAJ,EAAMxD,EAAK,GAAKQ,EAET,2BACAI,GADP,IAEImC,WAAW,EACXvC,QAASgD,IAEf,QACE,OAAO5C,MGlCLiD,EAAoBrG,OAAesG,sCACpCC,IAECC,EAAQC,YAAYC,OACxBjE,EACA4D,EACEM,YAAgBC,OAGpBC,IAASC,OACP,6BACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,QAGJO,SAASC,eAAe,SP8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtF,MAAK,SAAAuF,GACJA,EAAaC,gBAEdhF,OAAM,SAAAiF,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.86590f4d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, { AxiosRequestConfig } from 'axios';\n\nconst BASE_URL = \"https://hacker-news.firebaseio.com/v0\";\nconst JSON_QUERY = \".json?print=pretty\";\n\nclass HNClient {  \n  client = axios.create({\n   baseURL: BASE_URL, \n  } as AxiosRequestConfig);\n  construcor() {}\n\n  topStories = async () => this.client.get(`/topstories${JSON_QUERY}`)\n  storyByID = async (id: string) => this.client.get(`/item/${id}${JSON_QUERY}`)\n}\n\nexport default HNClient;","import HNClient from \"../services/hn-client\"\n\nconst preFetch = 'FETCH'\nconst preApp = 'APP'\n\nexport const types = {\n  FETCH_IDS_REQUEST: `${preFetch}/IDS REQUEST`,\n  FETCH_IDS_SUCCESS: `${preFetch}/IDS SUCCESS`,\n  FETCH_IDS_ERROR: `${preFetch}/IDS ERROR`,\n  FETCH_STORIES_REQUEST: `${preFetch}/STORIES REQUEST`,\n  FETCH_STORIES_SUCCESS: `${preFetch}/STORIES SUCCESS`,\n  FETCH_STORIES_ERROR: `${preFetch}/STORIES ERROR`,\n\n  APP_PAGE_GOTO: `${preApp}/SET PAGE`,\n}\n\nconst hnClient = new HNClient()\n\nconst action = (type, payload) => ({ type, payload })\nexport const actions = {\n  FetchIDs: (payload) => (dispatch) => {\n    dispatch(action(types.FETCH_IDS_REQUEST, payload))\n\n    return hnClient.topStories()\n      .then(r => {\n        payload.storyIDs = r.data.map(v => v.toString())\n        dispatch(action(types.FETCH_IDS_SUCCESS, payload.storyIDs))\n        dispatch(actions.FetchStories(payload))\n      })\n      .catch(e => dispatch(\n        action(types.FETCH_IDS_ERROR, e)\n      ))\n  },\n\n  FetchStories: (payload) => (dispatch) => {\n    let { pageMax, storyIDs, page } = payload\n    if (pageMax === undefined) {\n      pageMax = 20\n    }\n    \n    const begin = (page - 1) * pageMax;\n    let end = begin + pageMax;\n    if (end > storyIDs.length) {\n      end = storyIDs.length - 1\n    }\n    let slice: [] = storyIDs.slice(begin, end)\n\n    dispatch(action(types.FETCH_STORIES_REQUEST, { slice }))\n\n    return Promise.all<any>(slice.map(\n      id => hnClient.storyByID(id)))\n      .then(stories => {\n        dispatch(action(\n          types.FETCH_STORIES_SUCCESS,\n          {\n            stories: stories.map(s => s.data),\n            page, pageMax\n          }\n        ))\n      })\n      .catch(e => {\n        dispatch(action(types.FETCH_STORIES_ERROR, e))\n      })\n  },\n\n  Navigate: (payload) => (dispatch) => {\n    let { page, stories } = payload\n    if (stories[page-1].length === 0) {\n      dispatch(actions.FetchStories(payload))\n    }\n    dispatch(action(types.APP_PAGE_GOTO, {page}))\n  }\n}","import React from 'react';\nimport { Spinner, ListGroup, ListGroupItem, Navbar, Pagination, Nav } from 'react-bootstrap';\nimport { connect } from 'react-redux'\nimport { actions } from './actions/index';\n\nconst mstp = (state) => ({\n  state: {\n    data: state.data,\n    app: state.app,\n  }\n})\n\nconst shortenUrl = (url) => {\n  if (url === undefined) {\n    return 'news.ycombinator.com'\n  }\n  return url.split('/')[2]\n}\n\nconst ListStories = connect(mstp)((props) => {\n  const { storyIDs, stories } = props.state.data\n  const { page } = props.state.app\n\n  const navigate = (page) => {\n    props.dispatch(actions.Navigate({\n      storyIDs, stories, page\n    }))\n  }\n\n  const isFirst = () => page === 1\n  const isLast = () => page === stories.length\n  return <div>\n    {\n      stories[page-1].map(s => (\n        <ListGroupItem\n          onClick={() => window.open(s.url)}\n          className='listItem'\n          key={s.id}>\n          <h5>{s.title}</h5>\n          <span>({shortenUrl(s.url)})</span>\n          <p>{s.score} points by {s.by} | {s.descendants} comments</p>\n        </ListGroupItem>\n      ))\n    }\n    <ListGroupItem className='listItem'>\n      <Pagination>\n        <Pagination.First\n          onClick={() => navigate(1)}\n          disabled={isFirst()} />\n        <Pagination.Prev\n          onClick={() => navigate(page-1)}\n          disabled={isFirst()} />\n        <Pagination.Item active>{page}</Pagination.Item>\n        <Pagination.Next\n          onClick={() => navigate(page+1)}\n          disabled={isLast()} />\n        <Pagination.Last\n          onClick={() => navigate(stories.length)}\n          disabled={isLast()} />\n      </Pagination>\n    </ListGroupItem>\n  </div>\n})\n\nconst Container = (props) => (\n  <div id='container'>{props.children}</div>\n)\n\nconst Heading = connect(mstp)((props) => {\n  return (\n    <Navbar sticky='top' bg='dark' variant='dark'>\n      <Navbar.Brand>HackerNews</Navbar.Brand>\n    </Navbar>\n  )\n})\n\nconst App = (props) => {\n  const { isLoading, stories } = props.state.data\n  const { page } = props.state.app\n\n  const noStories = props.state.data.storyIDs.length === 0\n\n  if (!isLoading && noStories) {\n    props.dispatch(actions.FetchIDs({ page: 1 }))\n  }\n\n  if (noStories || isLoading) {\n    return (\n      <div className=\"App\">\n        <Heading />\n        <Container>\n          <ListGroup>\n            <ListGroup.Item className='listItem'>\n              <Spinner\n                className='spinner'\n                animation='border' />\n            </ListGroup.Item>\n          </ListGroup>\n        </Container>\n      </div>\n    )\n  }\n  \n  return (\n    <div className=\"App\">\n      <Heading />\n      <Container>\n        <ListGroup>\n          <ListStories\n            currentPage={page}\n          />\n        </ListGroup>\n      </Container>\n    </div>\n  )\n}\n\nexport default connect(mstp)(App);","import { types } from '../actions'\n\ninterface IDataState {\n  isLoading: boolean\n  storyIDs: string[]\n  stories: [][]\n  pageMax: number\n}\n\nconst defaultDataState: IDataState = {\n  isLoading: false,\n  storyIDs: [],\n  stories: [],\n  pageMax: 20,\n}\n\nexport default (state = defaultDataState, action) => {\nswitch (action.type) {\n  case types.FETCH_IDS_REQUEST:\n    return { ...state, isLoading: true }\n  case types.FETCH_IDS_SUCCESS:\n    return {\n      ...state,\n      storyIDs: action.payload\n    }\n  case types.FETCH_STORIES_REQUEST:\n    return { ...state, isLoading: true }\n  case types.FETCH_STORIES_SUCCESS:\n    const { page, stories } = action.payload\n    const { storyIDs, pageMax } = state\n    const cache = state.stories\n    \n    let pageCount = Math.floor(storyIDs.length / pageMax)\n    if (storyIDs.length % pageMax !== 0) pageCount++\n\n    if (cache.length < pageCount) {\n        for (let i = 0; i < pageCount; i++) {\n        cache[i] = []\n        }\n    }\n    cache[page-1] = stories\n\n    return {\n        ...state,\n        isLoading: false,\n        stories: cache,\n    }\n  default:\n    return state\n  }\n}","import { types } from '../actions'\n\ninterface IAppState {\n  page: number\n}\n  \nconst defaultAppState: IAppState = {\n  page: 1\n}\n  \nexport default (state = defaultAppState, action) => {\n  switch (action.type) {\n    case types.APP_PAGE_GOTO:\n      const { page } = action.payload\n      return { ...state, page }\n    default:\n      return state\n  }\n}\n  ","import { combineReducers } from 'redux'\n\nimport dataReducer from './dataReducer'\nimport appReducer from './appReducer'\n\nexport default combineReducers({\n  app: appReducer,\n  data: dataReducer,\n})","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport * as serviceWorker from './serviceWorker'\n\nimport './index.css'\nimport App from './App'\n\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\n\nimport rootReducer from './reducer'\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n  || compose;\n\nconst store = createStore(rootReducer,\n  undefined,\n  composeEnhancers(\n    applyMiddleware(thunk)),\n)\n\nReactDOM.render(\n  <div>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </div>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}